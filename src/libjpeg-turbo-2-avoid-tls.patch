From 1d17e2f04fbf1446415cc6a1cc45f50072c4b174 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Daniel=20Gl=C3=B6ckner?= <daniel-gl@gmx.net>
Date: Sun, 28 May 2023 22:35:49 +0200
Subject: [PATCH] Avoid TLS

TLS has to be emulated on MinGW by libgcc_s and the emulation code will
use the winpthread library. Let's avoid these dependencies. The SIMD
support should be the same for each thread anyway.
---
 simd/i386/jsimd.c | 30 +++++++++++++++++++-----------
 1 file changed, 19 insertions(+), 11 deletions(-)

diff --git a/simd/i386/jsimd.c b/simd/i386/jsimd.c
index b429b0a..b4e25a4 100644
--- a/simd/i386/jsimd.c
+++ b/simd/i386/jsimd.c
@@ -21,6 +21,7 @@
 #include "../../jdct.h"
 #include "../../jsimddct.h"
 #include "../jsimd.h"
+#include <stdatomic.h>
 
 /*
  * In the PIC cases, we have no guarantee that constants will keep
@@ -31,8 +32,11 @@
 #define IS_ALIGNED_SSE(ptr)  (IS_ALIGNED(ptr, 4)) /* 16 byte alignment */
 #define IS_ALIGNED_AVX(ptr)  (IS_ALIGNED(ptr, 5)) /* 32 byte alignment */
 
-static THREAD_LOCAL unsigned int simd_support = (unsigned int)(~0);
-static THREAD_LOCAL unsigned int simd_huffman = 1;
+static atomic_uint simd_support_atomic = ATOMIC_VAR_INIT((unsigned int)(~0));
+static atomic_uint simd_huffman_atomic = ATOMIC_VAR_INIT(2);
+
+#define simd_support atomic_load_explicit(&simd_support_atomic, memory_order_relaxed)
+#define simd_huffman atomic_load_explicit(&simd_huffman_atomic, memory_order_relaxed)
 
 /*
  * Check what SIMD accelerations are supported.
@@ -40,32 +44,36 @@ static THREAD_LOCAL unsigned int simd_huffman = 1;
 LOCAL(void)
 init_simd(void)
 {
+  unsigned int local_simd_support, local_simd_huffman;
 #ifndef NO_GETENV
   char env[2] = { 0 };
 #endif
 
-  if (simd_support != ~0U)
+  if (simd_support != ~0U && simd_huffman != 2)
     return;
 
-  simd_support = jpeg_simd_cpu_support();
+  local_simd_support = jpeg_simd_cpu_support();
+  local_simd_huffman = 1;
 
 #ifndef NO_GETENV
   /* Force different settings through environment variables */
   if (!GETENV_S(env, 2, "JSIMD_FORCEMMX") && !strcmp(env, "1"))
-    simd_support &= JSIMD_MMX;
+    local_simd_support &= JSIMD_MMX;
   if (!GETENV_S(env, 2, "JSIMD_FORCE3DNOW") && !strcmp(env, "1"))
-    simd_support &= JSIMD_3DNOW | JSIMD_MMX;
+    local_simd_support &= JSIMD_3DNOW | JSIMD_MMX;
   if (!GETENV_S(env, 2, "JSIMD_FORCESSE") && !strcmp(env, "1"))
-    simd_support &= JSIMD_SSE | JSIMD_MMX;
+    local_simd_support &= JSIMD_SSE | JSIMD_MMX;
   if (!GETENV_S(env, 2, "JSIMD_FORCESSE2") && !strcmp(env, "1"))
-    simd_support &= JSIMD_SSE2;
+    local_simd_support &= JSIMD_SSE2;
   if (!GETENV_S(env, 2, "JSIMD_FORCEAVX2") && !strcmp(env, "1"))
-    simd_support &= JSIMD_AVX2;
+    local_simd_support &= JSIMD_AVX2;
   if (!GETENV_S(env, 2, "JSIMD_FORCENONE") && !strcmp(env, "1"))
-    simd_support = 0;
+    local_simd_support = 0;
   if (!GETENV_S(env, 2, "JSIMD_NOHUFFENC") && !strcmp(env, "1"))
-    simd_huffman = 0;
+    local_simd_huffman = 0;
 #endif
+  atomic_store_explicit(&simd_huffman_atomic, local_simd_huffman, memory_order_relaxed);
+  atomic_store_explicit(&simd_support_atomic, local_simd_support, memory_order_relaxed);
 }
 
 GLOBAL(int)
-- 
2.20.1

